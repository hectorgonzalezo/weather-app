"use strict";(self.webpackChunkweather_app=self.webpackChunkweather_app||[]).push([[179],{26:(n,e,t)=>{const r=function(){function n(n){const e={};return e.day=new Date(1e3*n.dt),e.temp=n.main.temp,e.description=n.weather[0].description,e.feels_like=n.main.feels_like,e.humidity=n.main.humidity,e.wind_speed=n.wind.speed,e.cloudiness=n.clouds.all,e}async function e(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"London",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"weather",t="";"forecast"===e&&(t="&cnt=5");const r=await fetch("https://api.openweathermap.org/data/2.5/".concat(e,"?q=").concat(n).concat(t,"&appid=e2802a8fb9f851e53d09fe4eb9b16d38"),{mode:"cors"});if(r.ok)return await r.json();throw new Error("City not found")}return{getWeather:async function(t){return await e(t,"weather").then((e=>n(e)))},getForecast:async function(t){return(await e(t,"forecast").then((n=>n.list))).map((e=>n(e)))}}}();var o=t(379),a=t.n(o),i=t(795),c=t.n(i),s=t(569),l=t.n(s),A=t(565),d=t.n(A),u=t(216),f=t.n(u),p=t(589),m=t.n(p),h=t(426),g={};g.styleTagTransform=m(),g.setAttributes=d(),g.insert=l().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=f(),a()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;const b=function(){const n=document.querySelector("h1"),e=document.querySelectorAll("#current p"),t=document.querySelectorAll(".another-day");function r(t,r){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e;n.innerText=t;const a=Object.values(r);o.forEach(((n,e)=>{n.innerText=a[e]}))}return{renderWeather:r,renderForecast:function(n,e){t.forEach(((t,o)=>{const a=t.children;r(n,e[o],[...a])}))}}}();!function(){const n=document.querySelector("form"),e=document.querySelector("#input-city");async function t(t){if(n.checkValidity()){t.preventDefault();const n=e.value,o=await r.getWeather(n).then((n=>n)),a=await r.getForecast(n).then((n=>n));b.renderWeather(n,o),b.renderForecast(n,a)}}document.querySelector("form input[type=submit]").addEventListener("click",t),e.onkeydown=n=>{13===n.keyCode&&t(n)}}()},917:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,'/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n:root {\n  box-sizing: border-box;\n}\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n',"",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;AACD;EACE,sBAAsB;AACxB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiFE,SAAS;EACT,UAAU;EACV,SAAS;EACT,eAAe;EACf,aAAa;EACb,wBAAwB;AAC1B;AACA,gDAAgD;AAChD;;;;;;;;;;;EAWE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;;EAEE,gBAAgB;AAClB;AACA;;EAEE,YAAY;AACd;AACA;;;;EAIE,WAAW;EACX,aAAa;AACf;AACA;EACE,yBAAyB;EACzB,iBAAiB;AACnB",sourcesContent:['/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n:root {\n  box-sizing: border-box;\n}\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n'],sourceRoot:""}]);const c=i},426:(n,e,t)=>{t.d(e,{Z:()=>l});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),c=t(917),s=i()(o());s.i(c.Z),s.push([n.id,':root {\n  --color-background: #f0f9ff;\n  --color-light: #e0f2fe;\n  --color-medium-light: #b4e1f6;\n  --color-medium-dark: #38bdf8;\n  --color-dark: #0c4a6e;\n  --color-complementary-light: rgb(228, 148, 148);\n  --color-complementary-dark: rgb(97, 21, 21);\n}\n\n/* * {\n    outline: dashed red;\n} */\n\nbody {\n    background-color: green;\n    height: 100vh;\n    width: 100vw;\n    display: grid;\n    grid-template-rows: 1fr 6fr 0.5fr;\n}\n\nheader {\n    background-color: blue;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nheader > img {\n    height: 192px;\n}\n\nmain {\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n    grid-row: 5fr 1fr;\n    grid-template-areas: \n                        \'current ...\'\n                        \'forecast forecast\';\n}\n\n#current {\n    grid-area: current;\n}\n\n#current,\n.another-day {\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n}\n\n#forecast {\n    grid-area: forecast;\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-template-rows: 1fr;\n}\n\n\nfooter {\n    margin-top: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 50px;\n    width: 100%;\n    gap: 2vw;\n    background-color: var(--color-dark);\n    color: white;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,\n      Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-size: 1.5rem;\n  }\n  \n  #github-logo {\n    height: 30px;\n  }',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAIA;EACE,2BAA2B;EAC3B,sBAAsB;EACtB,6BAA6B;EAC7B,4BAA4B;EAC5B,qBAAqB;EACrB,+CAA+C;EAC/C,2CAA2C;AAC7C;;AAEA;;GAEG;;AAEH;IACI,uBAAuB;IACvB,aAAa;IACb,YAAY;IACZ,aAAa;IACb,iCAAiC;AACrC;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,iBAAiB;IACjB;;2CAEuC;AAC3C;;AAEA;IACI,kBAAkB;AACtB;;AAEA;;;IAGI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;AACjC;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,qCAAqC;IACrC,uBAAuB;AAC3B;;;AAGA;IACI,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,YAAY;IACZ,WAAW;IACX,QAAQ;IACR,mCAAmC;IACnC,YAAY;IACZ;iFAC6E;IAC7E,iBAAiB;EACnB;;EAEA;IACE,YAAY;EACd",sourcesContent:['@import "./reset.css";\n\n\n\n:root {\n  --color-background: #f0f9ff;\n  --color-light: #e0f2fe;\n  --color-medium-light: #b4e1f6;\n  --color-medium-dark: #38bdf8;\n  --color-dark: #0c4a6e;\n  --color-complementary-light: rgb(228, 148, 148);\n  --color-complementary-dark: rgb(97, 21, 21);\n}\n\n/* * {\n    outline: dashed red;\n} */\n\nbody {\n    background-color: green;\n    height: 100vh;\n    width: 100vw;\n    display: grid;\n    grid-template-rows: 1fr 6fr 0.5fr;\n}\n\nheader {\n    background-color: blue;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nheader > img {\n    height: 192px;\n}\n\nmain {\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n    grid-row: 5fr 1fr;\n    grid-template-areas: \n                        \'current ...\'\n                        \'forecast forecast\';\n}\n\n#current {\n    grid-area: current;\n}\n\n#current,\n.another-day {\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n}\n\n#forecast {\n    grid-area: forecast;\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-template-rows: 1fr;\n}\n\n\nfooter {\n    margin-top: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 50px;\n    width: 100%;\n    gap: 2vw;\n    background-color: var(--color-dark);\n    color: white;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,\n      Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-size: 1.5rem;\n  }\n  \n  #github-logo {\n    height: 30px;\n  }'],sourceRoot:""}]);const l=s},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],l=r.base?s[0]+r.base:s[0],A=a[l]||0,d="".concat(l," ").concat(A);a[l]=A+1;var u=t(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(f);else{var p=o(f,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var s=r(n,o),l=0;l<a.length;l++){var A=t(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},n=>{n(n.s=26)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,