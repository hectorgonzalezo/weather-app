"use strict";(self.webpackChunkweather_app=self.webpackChunkweather_app||[]).push([[179],{690:()=>{(function(){function e(e){const t={};return t.day=new Date(1e3*e.dt),t.temp=e.main.temp,t.description=e.weather[0].description,t.feels_like=e.main.feels_like,t.humidity=e.main.humidity,t.coord=e.coord,t.wind_speed=e.wind.speed,t.cloudiness=e.clouds.all,t}async function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"London",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"weather";const n=await fetch("https://api.openweathermap.org/data/2.5/".concat(t,"?q=").concat(e,"&appid=e2802a8fb9f851e53d09fe4eb9b16d38"),{mode:"cors"});if(n.ok)return await n.json();throw new Error("City not found")}return{getWeather:async function(n){return await t(n,"weather").then((t=>e(t)))},getForecast:async function(n){let a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;const o=await t(n,"forecast").then((e=>e.list.slice(0,a))),i=o.map((t=>e(t)));return i}}})().getForecast().then((e=>console.log(e)))}},e=>{e(e.s=690)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoib0dBQWUsV0FFYixTQUFTQSxFQUFtQkMsR0FDMUIsTUFBTUMsRUFBUyxDQUFDLEVBV2hCLE9BVEFBLEVBQU9DLElBQU0sSUFBSUMsS0FBbUIsSUFBZEgsRUFBU0ksSUFDL0JILEVBQU9JLEtBQU9MLEVBQVNNLEtBQUtELEtBQzVCSixFQUFPTSxZQUFjUCxFQUFTUSxRQUFRLEdBQUdELFlBQ3pDTixFQUFPUSxXQUFhVCxFQUFTTSxLQUFLRyxXQUNsQ1IsRUFBT1MsU0FBV1YsRUFBU00sS0FBS0ksU0FDaENULEVBQU9VLE1BQVFYLEVBQVNXLE1BQ3hCVixFQUFPVyxXQUFhWixFQUFTYSxLQUFLQyxNQUNsQ2IsRUFBT2MsV0FBYWYsRUFBU2dCLE9BQU9DLElBRTdCaEIsQ0FDUixDQUNEaUIsZUFBZUMsSUFBK0MsSUFBdkNDLEVBQXVDLHVEQUE1QixTQUFVQyxFQUFrQix1REFBWCxVQUVqRCxNQUFNQyxRQUFnQkMsTUFBTSwyQ0FBRCxPQUNrQkYsRUFEbEIsY0FDNEJELEVBRDVCLDJDQUV6QixDQUFFSSxLQUFNLFNBSVYsR0FBSUYsRUFBUUcsR0FFVixhQURtQkgsRUFBUUksT0FHN0IsTUFBTSxJQUFJQyxNQUFNLGlCQUNqQixDQXlCRCxNQUFPLENBQUVDLFdBdEJUVixlQUEwQkUsR0FLeEIsYUFIeUJELEVBQVFDLEVBQVUsV0FDeENTLE1BQU1DLEdBQVMvQixFQUFtQitCLElBR3RDLEVBZ0JvQkMsWUFickJiLGVBQTJCRSxHQUF1QixJQUFiWSxFQUFhLHVEQUFILEVBQzdDLE1BQU1DLFFBQW9CZCxFQUFRQyxFQUFVLFlBQ3pDUyxNQUFNQyxHQUVZQSxFQUFLSSxLQUFLQyxNQUFNLEVBQUdILEtBSWxDSSxFQUFXSCxFQUFZSSxLQUFLUCxHQUFTL0IsRUFBbUIrQixLQUU5RCxPQUFPTSxDQUNSLEVBR0YsRUF2RGMsR0NHZkUsY0FBb0JULE1BQU1VLEdBQVdDLFFBQVFDLElBQUlGLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9tb2RlbC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vZGVsID0gKGZ1bmN0aW9uIG1vZGVsKCkge1xuICAvLyBHZXRzIGRhdGEgZnJvbSBvcGVuV2VhdGhlciBKU09OIGFuZCBhZGRzIGl0IHRvIHRhcmdldCBlbXB0eSBvYmplY3RcbiAgZnVuY3Rpb24gZXh0cmFjdFdlYXRoZXJEYXRhKG9yaWdpbmFsKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgLy8gU2VsZWN0aW9uIG9mIHZhbHVlc1xuICAgIHRhcmdldC5kYXkgPSBuZXcgRGF0ZShvcmlnaW5hbC5kdCAqIDEwMDApO1xuICAgIHRhcmdldC50ZW1wID0gb3JpZ2luYWwubWFpbi50ZW1wO1xuICAgIHRhcmdldC5kZXNjcmlwdGlvbiA9IG9yaWdpbmFsLndlYXRoZXJbMF0uZGVzY3JpcHRpb247XG4gICAgdGFyZ2V0LmZlZWxzX2xpa2UgPSBvcmlnaW5hbC5tYWluLmZlZWxzX2xpa2U7XG4gICAgdGFyZ2V0Lmh1bWlkaXR5ID0gb3JpZ2luYWwubWFpbi5odW1pZGl0eTtcbiAgICB0YXJnZXQuY29vcmQgPSBvcmlnaW5hbC5jb29yZDtcbiAgICB0YXJnZXQud2luZF9zcGVlZCA9IG9yaWdpbmFsLndpbmQuc3BlZWQ7XG4gICAgdGFyZ2V0LmNsb3VkaW5lc3MgPSBvcmlnaW5hbC5jbG91ZHMuYWxsO1xuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBjYWxsQVBJKGNpdHlOYW1lID0gJ0xvbmRvbicsIHR5cGUgPSAnd2VhdGhlcicpIHtcbiAgICAvLyBjYWxsIHRoZSBvcGVuV2VhdGhlciBhcGlcbiAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgZmV0Y2goXG4gICAgICBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41LyR7dHlwZX0/cT0ke2NpdHlOYW1lfSZhcHBpZD1lMjgwMmE4ZmI5Zjg1MWU1M2QwOWZlNGViOWIxNmQzOGAsXG4gICAgICB7IG1vZGU6ICdjb3JzJyB9LFxuICAgICk7XG4gICAgLy8gaWYgdGhlIHJlcXVlc3Qgd2FzIHN1Y2Nlc3NmdWxsLCByZXR1cm4gdGhlIGRhdGFcbiAgICAvLyBvdGhlcndpc2UgZGlzcGxheSBlcnJvciBtZXNzYWdlXG4gICAgaWYgKHJlcXVlc3Qub2spIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NpdHkgbm90IGZvdW5kJyk7XG4gIH1cblxuICAvLyBFeHRyYWN0cyBkYXRhIGZyb20gZ2V0V2VhdGhlcigpIGZvciBldmVyeSBhcmd1bWVudFxuICBhc3luYyBmdW5jdGlvbiBnZXRXZWF0aGVyKGNpdHlOYW1lKSB7XG4gICAgLy8gZ2V0IGFsbCBhIHNlbGVjdGlvbiBvZiB2YWx1ZXMgYW5kIHN0b3JlIHRoZW0gaW4gZGF0YU9iamVjdFxuICAgIGNvbnN0IGRhdGFPYmplY3QgPSBhd2FpdCBjYWxsQVBJKGNpdHlOYW1lLCAnd2VhdGhlcicpXG4gICAgICAudGhlbigoZGF0YSkgPT4gZXh0cmFjdFdlYXRoZXJEYXRhKGRhdGEpKTtcblxuICAgIHJldHVybiBkYXRhT2JqZWN0O1xuICB9XG5cbiAgLy8gR2V0cyBmb3JlY2FzdCBmb3IgdGhlIG5leHQgbnVtRGF5cyBkYXlzXG4gIGFzeW5jIGZ1bmN0aW9uIGdldEZvcmVjYXN0KGNpdHlOYW1lLCBudW1EYXlzID0gNSkge1xuICAgIGNvbnN0IHJhd0RhdGFMaXN0ID0gYXdhaXQgY2FsbEFQSShjaXR5TmFtZSwgJ2ZvcmVjYXN0JylcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIC8vIGdldCB0aGUgZmlyc3QgZml2ZSBkYXlzXG4gICAgICAgIGNvbnN0IGZpdmVEYXlzID0gZGF0YS5saXN0LnNsaWNlKDAsIG51bURheXMpO1xuICAgICAgICByZXR1cm4gZml2ZURheXM7XG4gICAgICB9KTtcbiAgICAvLyBFeHRyYWN0IHNlbGVjdGVkIGRhdGFcbiAgICBjb25zdCBkYXRhTGlzdCA9IHJhd0RhdGFMaXN0Lm1hcCgoZGF0YSkgPT4gZXh0cmFjdFdlYXRoZXJEYXRhKGRhdGEpKTtcblxuICAgIHJldHVybiBkYXRhTGlzdDtcbiAgfVxuXG4gIHJldHVybiB7IGdldFdlYXRoZXIsIGdldEZvcmVjYXN0IH07XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBtb2RlbDtcbiIsImltcG9ydCBtb2RlbCBmcm9tICcuL21vZGVsJztcblxuLy8gbW9kZWwuZ2V0V2VhdGhlcigpLnRoZW4oKHJlc3VsdCkgPT4gY29uc29sZS5sb2cocmVzdWx0KSk7XG5tb2RlbC5nZXRGb3JlY2FzdCgpLnRoZW4oKHJlc3VsdCkgPT4gY29uc29sZS5sb2cocmVzdWx0KSk7XG4iXSwibmFtZXMiOlsiZXh0cmFjdFdlYXRoZXJEYXRhIiwib3JpZ2luYWwiLCJ0YXJnZXQiLCJkYXkiLCJEYXRlIiwiZHQiLCJ0ZW1wIiwibWFpbiIsImRlc2NyaXB0aW9uIiwid2VhdGhlciIsImZlZWxzX2xpa2UiLCJodW1pZGl0eSIsImNvb3JkIiwid2luZF9zcGVlZCIsIndpbmQiLCJzcGVlZCIsImNsb3VkaW5lc3MiLCJjbG91ZHMiLCJhbGwiLCJhc3luYyIsImNhbGxBUEkiLCJjaXR5TmFtZSIsInR5cGUiLCJyZXF1ZXN0IiwiZmV0Y2giLCJtb2RlIiwib2siLCJqc29uIiwiRXJyb3IiLCJnZXRXZWF0aGVyIiwidGhlbiIsImRhdGEiLCJnZXRGb3JlY2FzdCIsIm51bURheXMiLCJyYXdEYXRhTGlzdCIsImxpc3QiLCJzbGljZSIsImRhdGFMaXN0IiwibWFwIiwibW9kZWwiLCJyZXN1bHQiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==